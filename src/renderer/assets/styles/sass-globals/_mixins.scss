/**
 * Calculate PX font size to REM
 *
 * @param {number} $size - element size in pixel
 * @param {number} $base - body font size in pixel
 *
 */
@mixin fontSizeREM($size: $font-size, $base: $base-font-size) {
  font-size: ($size / $base) + rem;
}

/**
 * Calculates given px value to rem value
 *
 * @param {string} $prop - css property name, e.g. font-size, line-height; Default: 'font-size'
 * @param {number} $size - size in px; Default: $body-font-size-px
 *
 */
@mixin propToREM($prop: 'font-size', $size: $size) {
  #{$prop}: ($size / $base-font-size) + rem;
}

/**
 * Mixin for defining values at an specific mediaQuerie
 *
 * @param {string} $width - breakpoint from $breakpoints map
 */
@mixin respondMin($width) {
  @media screen and (min-width: $width) {
    @content;
  }
}

@mixin respondMax($width) {
  @media screen and (max-width: $width) {
    @content;
  }
}

/**
 * Mixin for standard transition
 *
 * @param {string} $property - transitioned property
 * @param {string} $time - time for transition
 * @param {string} $delay - delay of transition
 * @param {string} $timing-function - type of transition
 */
@mixin transition(
  $property: all,
  $time: 225ms,
  $delay: 0ms,
  $timing-function: linear
) {
  transition: $property $time $delay $timing-function;
}

/**
 * Mixin for box-shadow
 *
 * @param {string} $x - offset-x
 * @param {string} $y - offset-y
 * @param {string} $blur - blur radius
 * @param {string} $spread - spread radius
 * @param {string} $color - color
 */
@mixin box-shadow(
  $x: 0px,
  $y: 6px,
  $blur: 8px,
  $spread: -5px,
  $color: $black
) {
  box-shadow: $x $y $blur $spread $color;
}

/**
 * Mixin for border-radius
 *
 * @param {string} $px
 */
@mixin border-radius($px: 5px) {
  border-radius: $px;
}

/**
 * Calculate PX to REM
 *
 * @param {number} $targetPx - pixel value without unit
 *
 */
@function pxToRem($targetPx, $basePx: $base-font-size) {
  @if (unitless($targetPx)) {
    $targetPx: $targetPx * 1px;
  }

  @if (unitless($basePx)) {
    $basePx: $basePx * 1px;
  }

  @return $targetPx / $basePx * 1rem;
}
